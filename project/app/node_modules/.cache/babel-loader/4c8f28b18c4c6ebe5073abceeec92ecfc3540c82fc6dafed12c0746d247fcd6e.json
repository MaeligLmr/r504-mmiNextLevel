{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { URL_API_FORMATIONS } from '../../utils/config';\nexport const loadFormations = createAsyncThunk('formation/loadFormations',\n// Nom de l'action\nasync (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.get(URL_API_FORMATIONS);\n    return response.data; // Retourne les données des formations\n  } catch (error) {\n    return rejectWithValue(\"L'application est actuellement indisponible, veuillez réessayer ultérieurement.\");\n  }\n});\nexport const addFormation = createAsyncThunk('formation/addFormation', async (formationData, {\n  rejectWithValue\n}) => {\n  try {\n    // Envoi d'une requête POST à l'API pour créer une nouvelle formation\n    const response = await axios.post(URL_API_FORMATIONS, formationData);\n    return response.data; // Retourne les données de la formation créée\n  } catch (error) {\n    // Gestion des erreurs : on retourne l'erreur à la fonction de rejet\n    throw new Error(error);\n  }\n});\n\n// Modifie une université\nexport const updateFormation = createAsyncThunk('formation/updateFormation', async (dataToSend, {\n  getState\n}) => {\n  try {\n    const response = await axios.put(URL_API_FORMATIONS + \"/update/etablissement/\" + getState().admin.idUnivEdited, dataToSend);\n    return response.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n});\nexport const deleteFormation = createAsyncThunk('formation/deleteFormation', async (formationId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.delete(URL_API_FORMATIONS + `/${formationId}`, formationId);\n    return response.data[0];\n  } catch (error) {\n    throw new Error(error);\n  }\n});","map":{"version":3,"names":["createAsyncThunk","axios","URL_API_FORMATIONS","loadFormations","_","rejectWithValue","response","get","data","error","addFormation","formationData","post","Error","updateFormation","dataToSend","getState","put","admin","idUnivEdited","deleteFormation","formationId","delete"],"sources":["C:/iut_local/res504/src/features/admin/adminAsyncAction.js"],"sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { URL_API_FORMATIONS } from '../../utils/config';\r\n\r\nexport const loadFormations = createAsyncThunk(\r\n    'formation/loadFormations', // Nom de l'action\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const response = await axios.get(URL_API_FORMATIONS);\r\n      return response.data; // Retourne les données des formations\r\n    } catch (error) {\r\n      return rejectWithValue(\"L'application est actuellement indisponible, veuillez réessayer ultérieurement.\")\r\n    }\r\n  }\r\n);\r\nexport const addFormation = createAsyncThunk(\r\n  'formation/addFormation',\r\n  async (formationData, { rejectWithValue }) => {\r\n    try {\r\n      // Envoi d'une requête POST à l'API pour créer une nouvelle formation\r\n      const response = await axios.post(URL_API_FORMATIONS, formationData);\r\n      return response.data; // Retourne les données de la formation créée\r\n    } catch (error) {\r\n      // Gestion des erreurs : on retourne l'erreur à la fonction de rejet\r\n      throw new Error(error)\r\n    }\r\n  }\r\n);\r\n\r\n// Modifie une université\r\nexport const updateFormation = createAsyncThunk(\r\n  'formation/updateFormation',\r\n  async (dataToSend, {getState}) => {\r\n      try {\r\n          const response = await axios.put(URL_API_FORMATIONS + \"/update/etablissement/\" + getState().admin.idUnivEdited, dataToSend);\r\n          return response.data;\r\n      } catch(error){\r\n          throw new Error(error);\r\n      }\r\n  }\r\n);\r\n\r\nexport const deleteFormation = createAsyncThunk(\r\n'formation/deleteFormation',\r\nasync (formationId, {rejectWithValue})=>{\r\n  try {\r\n    const response = await axios.delete(URL_API_FORMATIONS + `/${formationId}`, formationId);\r\n    return response.data[0]; \r\n  } catch (error) {\r\n\r\n    throw new Error(error)\r\n  }\r\n}\r\n);\r\n\r\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB;AACnD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,kBAAkB,QAAQ,oBAAoB;AAEvD,OAAO,MAAMC,cAAc,GAAGH,gBAAgB,CAC1C,0BAA0B;AAAE;AAC9B,OAAOI,CAAC,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAChC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAACL,kBAAkB,CAAC;IACpD,OAAOI,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAOJ,eAAe,CAAC,iFAAiF,CAAC;EAC3G;AACF,CACF,CAAC;AACD,OAAO,MAAMK,YAAY,GAAGV,gBAAgB,CAC1C,wBAAwB,EACxB,OAAOW,aAAa,EAAE;EAAEN;AAAgB,CAAC,KAAK;EAC5C,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACW,IAAI,CAACV,kBAAkB,EAAES,aAAa,CAAC;IACpE,OAAOL,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACA,MAAM,IAAII,KAAK,CAACJ,KAAK,CAAC;EACxB;AACF,CACF,CAAC;;AAED;AACA,OAAO,MAAMK,eAAe,GAAGd,gBAAgB,CAC7C,2BAA2B,EAC3B,OAAOe,UAAU,EAAE;EAACC;AAAQ,CAAC,KAAK;EAC9B,IAAI;IACA,MAAMV,QAAQ,GAAG,MAAML,KAAK,CAACgB,GAAG,CAACf,kBAAkB,GAAG,wBAAwB,GAAGc,QAAQ,CAAC,CAAC,CAACE,KAAK,CAACC,YAAY,EAAEJ,UAAU,CAAC;IAC3H,OAAOT,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAMC,KAAK,EAAC;IACV,MAAM,IAAII,KAAK,CAACJ,KAAK,CAAC;EAC1B;AACJ,CACF,CAAC;AAED,OAAO,MAAMW,eAAe,GAAGpB,gBAAgB,CAC/C,2BAA2B,EAC3B,OAAOqB,WAAW,EAAE;EAAChB;AAAe,CAAC,KAAG;EACtC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACqB,MAAM,CAACpB,kBAAkB,GAAG,IAAImB,WAAW,EAAE,EAAEA,WAAW,CAAC;IACxF,OAAOf,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;EACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAEd,MAAM,IAAII,KAAK,CAACJ,KAAK,CAAC;EACxB;AACF,CACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}